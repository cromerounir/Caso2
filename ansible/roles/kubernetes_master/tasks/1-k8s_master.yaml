- name: configuring ports
  firewalld:
    permanent: yes
    immediate: yes
    state: enabled
    port: "{{item}}"
  loop:
   - 6443/tcp
   - 2379-2380/tcp
   - 10250-10252/tcp
   - 10255/tcp
   - 10252/tcp
   - 10255/tcp
   - 8285/udp
   - 8472/udp
   - 30000-32767/tcp
   - 10250/tcp

- name: kubeadm config
  shell: kubeadm config images pull

- name: reload firewallid
  systemd:
    name: firewalld
    state: reloaded

- name: allow access to workers and local
  firewalld:
      rich_rule: "{{item}}"
      permanent: yes
      immediate: yes
      state: enabled
  loop:
   - 'rule family=ipv4 source address=10.0.1.10/24 accept'
   - 'rule family=ipv4 source address=10.0.1.11/24 accept'

- name: update inages
  shell: kubeadm config images pull

- name: avoid kubeadm failing to initialize next step
  shell: echo 1 > /proc/sys/net/ipv4/ip_forward

- name: install plugin CNI and define pods network
  shell: kubeadm init --pod-network-cidr={{ip_cidr}}

- name: copy k8s files
  shell: |
    mkdir -p $HOME/.kube
    cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    chown $(id -u):$(id -g) $HOME/.kube/config

-name: kubeconfig root
    mkdir -p /root/.kube
    cp -i /etc/kubernetes/admin.conf /root/.kube/config
    chown $(id -u):$(id -g) /root/.kube/config

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command

- name: copy join_command to local
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
  become: no  

- name: enable root use kubectl_2
  shell: KUBECONFIG=/etc/kubernetes/admin.conf

#falta kubeadm join el mismo master.

#- name: create new foler .kube
#  command: mkdir -p /root/.kube

#- name: copy permissions
#  command: cp -i /etc/kubernetes/admin.conf /root/.kube/config

#- name: authorize root
#  shell: chown $(id -u):$(id -g) /root/.kube/config
